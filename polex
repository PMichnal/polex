#!/bin/bash

# the name polex is chosen cuz "pol" -> Tab is a sequance pretty eazey to get down fast

wd=$(dirname "$0")

source $wd/settings.sh
source $wd/functions.sh


PROJECT_NAME="$1"
LANGUAGE="$2"
LANGUAGE=$(echo "$LANGUAGE" | tr '[:lower:]' '[:upper:]')
if [ "$LANGUAGE" = "C++" ]
then 
    LANGUAGE="CPP"
elif [ "$LANGUAGE" = "PY" ]
then
    LANGUAGE="PYTHON"
elif [ "$LANGUAGE" = "JL" ]
then
    LANGUAGE="JULIA"
fi

mkdir -p ~/Projects

# Check if the first argument is --help
if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--h" ]
then
    printf "%-80s\n" "" "usage: polex [options] [project_name] [language]" ""
    printf "%-80s\n" "" "polex is a tool for creating and managing projects for different programming languages." ""
    printf "%-80s\n" "Options:"
    printf "  %-40s %s\n" "-l, --list" "List all existing projects"
    printf "  %-40s %s\n" "-h, --help" "Show this help message and exit"
    printf "  %-40s %s\n" "-a, --add" "Add a new language"
    printf "  %-40s %s\n" "-d, --delete" "Delete an existing language"
    printf "  %-40s %s\n" "--conda LANGUAGE yes|no" "Use conda (yes) or not (no) for LANGUAGE"
    printf "  %-40s %s\n" "--conda-packages LANGUAGE PACKAGE1 ..." "Set default conda packages for LANGUAGE"
    printf "  %-40s %s\n" "-e, --editor EDITOR" "Set the text editor for the project"
    printf "  %-40s %s\n" "-julia yes|no" "Use Julia packages (yes) or not (no)"
    printf "\n"
    printf "%-80s\n" "Arguments:"
    printf "  %-40s %s\n" "project_name" "The name of the project to create or open"
    printf "  %-40s %s\n" "language" "The language of the project"
    exit 0
fi


# Check if the first argument is --conda
if [ "$1" = "--conda" ]
then
    # Get the language and value from the second and third command line arguments
    LANGUAGE=$(echo "$2" | tr '[:lower:]' '[:upper:]')
    VALUE="$3"
    
    # Check if the value is yes or no
    if [ "$VALUE" = "yes" ] || [ "$VALUE" = "no" ]
    then
        # Update the CONDA_USAGE variable for this language in settings.sh with the new value
        sed -i "/^CONDA_USAGE_$LANGUAGE=/c\CONDA_USAGE_$LANGUAGE=$VALUE" "$wd/settings.sh"
        echo "Conda usage for $LANGUAGE updated to $VALUE"
    else
        # If the value is not yes or no, print an error message and exit with an error code
        echo "Error: Invalid value for --conda option (must be yes or no)"
        exit 1
    fi
    
    exit 0
fi

# Check if the first argument is --conda-packages
if [ "$1" = "--conda-packages" ]
then
    # Get the language from the second command line argument
    LANGUAGE=$(echo "$2" | tr '[:lower:]' '[:upper:]')
    
    # Shift the command line arguments to remove the first two arguments
    shift 2
    
    # Join the remaining command line arguments into a space-separated string of package names
    PACKAGES="$*"
    
    # Update the CONDA_PACKAGES variable for this language in settings.sh with the new value
    sed -i "/^CONDA_PACKAGES_$LANGUAGE=/c\CONDA_PACKAGES_$LANGUAGE=\"$PACKAGES\"" "$wd/settings.sh"
    
    echo "Conda packages for $LANGUAGE updated to $PACKAGES"
    
    exit 0
fi



if [ "$1" = "-list" ] || [ "$1" = "-l" ] || [ "$1" = "--list" ] || [ "$1" = "--l" ]
then
    if [ -d ~/Projects ]
    then
        if [ -d ~/Projects/* ]
        then
            for dir in ~/Projects/*/
            do
                if [ "$(ls -A $dir)" ]
                then
                    dir_name=$(basename $dir)
                    case $dir_name in
                        "PYTHON")
                            color=$PYTHON_COLOR
                            ;;
                        "C++")
                            color=$CPP_COLOR
                            ;;
                        "JULIA")
                            color=$JULIA_COLOR
                            ;;
                        *)
                            color=$RED
                            ;;
                    esac
                    echo "$dir_name Projects:"
                    for subdir in $dir*/
                    do
                        if [ -d "$subdir" ]
                        then
                            subdir_name=$(basename "$subdir")
                            created=$(stat -c %w "$subdir")
                            printf "${color}> %-20s${NC} (created: %s)\n" "$subdir_name" "$created"
                        fi
                    done
                    echo -e "\n"
                fi
            done
        else
            echo "No projects to display"
        fi
    else
        echo "No projects inside ~/Projects directory"
    fi
    exit 0
fi


# Check if the first argument is -add or --add 
if [ "$1" = "-add" ] || [ "$1" = "--add" ] || [ "$1" = "-a" ] || [ "$1" = "--a" ]
then 
    # Prompt the user to enter the name of the new language and its default file name 
    read -p "Enter the name of the language: " language_name 
    read -p "Enter the default name for the file in this language: " default_file 
    
    # Convert the language name to uppercase 
    LANGUAGE=$(echo "$language_name" | tr '[:lower:]' '[:upper:]') 
    
    # Check if a directory for this language already exists 
    if [ -d ~/Projects/$LANGUAGE ] 
    then 
        # If it does, print an error message and exit with an error code 
        echo "Error: Language directory already exists"
        exit 1 
    else 
        # If it doesn't, create a new directory for this language in ~/Projects 
        mkdir ~/Projects/$LANGUAGE 
        
        # Create a new template file for this language in the Templates directory 
        touch "$wd/Templates/$default_file"
        
        # Update settings.sh with a new line defining DEF_FILE for this language 
        echo "${LANGUAGE}DEF=\"$default_file\"" >> "$wd/settings.sh"
        
        # Add a new line to settings.sh defining CONDA_USAGE for this language
        echo "CONDA_USAGE_$LANGUAGE=no" >> "$wd/settings.sh"

        echo "CONDA_PACKAGES_$LANGUAGE=\"\"" >> "$wd/settings.sh"
    fi
    
    exit 0 
fi


if [ "$1" = "-delete" ] || [ "$1" = "--delete" ] || [ "$1" = "-d" ] || [ "$1" = "--d" ]
then
    read -p "Enter the name of the language to delete: " language_name
    LANGUAGE=$(echo "$language_name" | tr '[:lower:]' '[:upper:]')
    
    # Delete the ~/Projects/$LANGUAGE directory
    if [ -d ~/Projects/$LANGUAGE ]
    then
        rm -rf ~/Projects/$LANGUAGE
        echo "Language directory deleted"
    else
        echo "Error: Language directory does not exist"
        exit 1
    fi
    

    # Delete the file associated with the language in the Templates directory
    DEF_FILE="${LANGUAGE}DEF"
    DEF_FILE=$(eval echo \$$DEF_FILE)

    rm "$wd/Templates/$DEF_FILE"
    echo "Template file deleted"
    

    # Delete the line in ~/settings.sh starting with ${LANGUAGE}DEF
    sed -i "/^${LANGUAGE}DEF/d" "$wd/settings.sh"
    sed -i "/^CONDA_USAGE_${LANGUAGE}/d" "$wd/settings.sh"
    sed -i "/^CONDA_PACKAGES_${LANGUAGE}/d" "$wd/settings.sh"
    
    exit 0
fi

if [ "$1" = "-e" ] || [ "$1" = "--editor" ] || [ "$1" = "--e" ] || [ "$1" = "-editor" ]
then
    # Get the name of the text editor from the command line argument
    editor_name="${2}"
    if [ "$editor_name" == "" ]
    then
        echo "Error: Invalid text editor"
        exit 1
    else
    # Update the value of the EDITOR variable in settings.sh
    sed -i "s/^EDITOR=.*/EDITOR=\"$editor_name\"/" "$wd/settings.sh"
    
    echo "Text editor changed to $editor_name"
    
    exit 0
    fi
fi


if [[ "$1" = "-julia" ]]
then
    if [ "$2" = "yes" ] || [ "$2" = "no" ]
    then
        # Update the CONDA_USAGE variable for this language in settings.sh with the new value
        sed -i "/^JULIA_PKG=/c\JULIA_PKG=$2" "$wd/settings.sh"
        echo "Julia usage for updated to $2"
    else
        # If the value is not yes or no, print an error message and exit with an error code
        echo "Error: Invalid value for -julia option (must be yes or no)"
        exit 1
    fi
    
    exit 0
fi


# Make sure the user provides a name for the project
if [ -z "$PROJECT_NAME" ]
then
    echo "Error: Name for the project not provided"
    exit 1
fi

# Automatically detect the language if it is not provided
if [ -z "$LANGUAGE" ]
then
    # Count the number of directories with the given project name
    PROJECT_COUNT=$(find ~/Projects/*/* -maxdepth 1 -type d -name "$PROJECT_NAME" | wc -l)
    if [ $PROJECT_COUNT -eq 1 ]
    then
        # If there is only one directory with the given project name,
        # automatically detect the language by getting the parent directory name
        LANGUAGE=$(basename $(dirname $(find ~/Projects/* -maxdepth 1 -type d -name "$PROJECT_NAME")))
    else
        echo "Error: Language for the project not provided"
        exit 1
    fi
fi


DEF_FILE="${LANGUAGE}DEF"
DEF_FILE=$(eval echo \$$DEF_FILE)

echo "LANGUAGE: $LANGUAGE"

if [ "$LANGUAGE" = "CPP" ]
then
    if [ -d ~/Projects/C++/$PROJECT_NAME ]
    then
        echo "Project with that name exists already"

        #open the main file
        [[ "$EDITOR" == "code" ]] && $EDITOR ~/Projects/C++/$PROJECT_NAME
        $EDITOR ~/Projects/C++/$PROJECT_NAME/main.cpp
    else
        echo "Creating..."
        #creating directory for C++
        create_directory C++ $PROJECT_NAME
        #just create a main.cpp file
        cd ~/Projects/C++/$PROJECT_NAME/
        get_template $DEF_FILE  > main.cpp
        [[ "$EDITOR" == "code" ]] && $EDITOR ~/Projects/C++/$PROJECT_NAME
        $EDITOR ~/Projects/C++/$PROJECT_NAME/main.cpp
    fi


elif [ "$LANGUAGE" = "PYTHON" ]
then
    if [ -d ~/Projects/PYTHON/$PROJECT_NAME ]
    then
        echo "Project with that name exists already"

        cd ~/Projects/PYTHON/$PROJECT_NAME

        #BASICALLY ACTIVATES THE ENVIROMENT AUTOMATICALY WHEN OPENNING THE TERMINAL IN VS CODE
        handle_conda $PROJECT_NAME $LANGUAGE
        

        [ "$EDITOR" == "code" ] && $EDITOR ~/Projects/PYTHON/$PROJECT_NAME
        $EDITOR ~/Projects/PYTHON/$PROJECT_NAME/main.py
    else
        create_directory PYTHON $PROJECT_NAME
        
        cd ~/Projects/PYTHON/$PROJECT_NAME
        #setup conda enviroment, automatically install basic packages to it
        handle_conda $PROJECT_NAME $LANGUAGE

        #create the main.py file with regards to the template given
        get_template $DEF_FILE > main.py
        [ "$EDITOR" == "code" ] && $EDITOR ~/Projects/PYTHON/$PROJECT_NAME
        $EDITOR ~/Projects/PYTHON/$PROJECT_NAME/main.py
    fi


# special environment generation for julia, cant be used with conda
elif [ $JULIA_PKG = "yes" ] && [ "$LANGUAGE" = "JULIA" ]     #|| [ -z "$LANGUAGE" ] #WILL SET JULIA TO DEFAULT (probably what i want), COULD ADD A OPTION TO CHANGE THE DEFAULT
then
    echo "słuszny wybór"
    
      if [ -d ~/Projects/JULIA/$PROJECT_NAME ]
      then
            echo "Project with that name exists already"

            #open the main file , and open the REPL in terminal
            [ "$EDITOR" == "code" ] && $EDITOR ~/Projects/JULIA/$PROJECT_NAME
            $EDITOR ~/Projects/JULIA/$PROJECT_NAME/src/$PROJECT_NAME.jl
            julia --project=$PROJECT_NAME
      else
            #creating directory for JULIA
            #takes care of creating a project file also
            create_directory JULIA $PROJECT_NAME

            #setup Julia enviroment
            mkdir ~/Projects/JULIA/$PROJECT_NAME/.vscode
            #Activating the environment, so that i dont have to click it every time
            [ "$EDITOR" == "code" ] && echo -e "{\n\t\"julia.environmentPath\": \"$HOME/Projects/JULIA/$PROJECT_NAME\"\n}" >  ~/Projects/JULIA/$PROJECT_NAME/.vscode/settings.json
            [ "$EDITOR" == "code" ] && $EDITOR ~/Projects/JULIA/$PROJECT_NAME
            $EDITOR ~/Projects/JULIA/$PROJECT_NAME/src/$PROJECT_NAME.jl
            julia --project=$PROJECT_NAME

      fi
elif [ -d ~/Projects/$LANGUAGE ]
then
    if [ -d ~/Projects/$LANGUAGE/$PROJECT_NAME ]
    then
        echo "Project with that name exists already"

        handle_conda $PROJECT_NAME $LANGUAGE

        #open the main file in VS code
        [ "$EDITOR" == "code" ] && $EDITOR ~/Projects/$LANGUAGE/$PROJECT_NAME
        $EDITOR ~/Projects/$LANGUAGE/$PROJECT_NAME/$DEF_FILE
    else
        #creating directory
        create_directory $LANGUAGE $PROJECT_NAME
        #just create
        cd ~/Projects/$LANGUAGE/$PROJECT_NAME/

        handle_conda $PROJECT_NAME $LANGUAGE

        get_template $DEF_FILE > $DEF_FILE
        [ "$EDITOR" == "code" ] && $EDITOR ~/Projects/$LANGUAGE/$PROJECT_NAME
        $EDITOR ~/Projects/$LANGUAGE/$PROJECT_NAME/$DEF_FILE
    fi

else
    echo "Be precise about the language to use in the project"
    exit 1
fi
